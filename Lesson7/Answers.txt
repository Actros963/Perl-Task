    1. Пафнутий пытался сделать выборку из данных симулятора всех бойцов, чья фамилия начинается с «Иван», и вывести все эти фамилии. Он написал такой код:
$name =~ /(\w+) (\w+) (\w+)/;
if ($1 =~ /^(Иван).*/) {
 print $1;
}
Что не так с этим кодом?
             В таком виде не работающий код. 
       Выведется в лучшем случае $1 из выражения ($1 =~ /^(Иван).*/) 
	и будет соответствовать (Иван)
	Я написал бы следующее выражение исходя из того что имя в программе определено выше в переменной $name:
	if ($name =~ /^(Иван.+) (\w+) (\w+)/){
		print $1;
	}	

    2. Как сделать так, чтобы помещённый в скобки подшаблон не производил захвата в переменную?
Сделать скобки незахватывающими (?:/pattern/) и тем самым сообщить Perl что скобки используются только для группировки. 

    3. Есть ли разница в интерпретации символов $ в следующих re:
/$foo$/ - $foo в данном случае переменная которая интерполируется в шаблоне, $ у закрывающего ограничителя означает что совпадение требуется искать в конце строки.
/$foo$bar$/ $foo$bar в данном случае переменные которые интерполируется в шаблоне  $ у закрывающего ограничителя означает что совпадение требуется искать в конце строки.
/$foo\n$bar/m интерполяция переменных
/($foo\n$)bar/m первая — интерполяция переменной, вторая конец строки.

    4. Есть ли смысл в re \b{3}? 
	Нет. \b означает границу слова. Это символ нулевой длины. {3} – квантификатор обозначающий 3 совпадения предыдущего фрагмента. 

    5. Какие из этих выражений является допустимыми? Почему?
"test"=~ /test/ Допустимо, m// работает с результатом любого скалярного выражения.
       
       
"test" =~ s/te/to/ 
"test" =~ s/te/to/r
   	  Поскольку s/// и tr/// изменяют скалярные значения, к которым применяются, их 	можно использовать только с допустимыми  левыми значениями.
1
